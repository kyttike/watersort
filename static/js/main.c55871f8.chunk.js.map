{"version":3,"sources":["utils.ts","Vial.tsx","VialDisplay.tsx","consts.ts","App.tsx","index.tsx"],"names":["Vial","vialState","selected","onClick","emptySlotsCount","size","length","emptySlots","Array","fill","className","map","_","index","slice","reverse","item","style","backgroundColor","VialDisplay","rows","gameState","selectedVial","onVialClick","indexedState","vial","Math","ceil","row","rowIndex","vialData","colors","maxVialSize","result","shuffledColors","array","temporaryValue","randomIndex","resultArray","currentIndex","floor","random","shuffle","flatMap","color","i","push","getRandomGamedata","concat","App","useState","setSelectedVial","setGameState","history","setHistory","selectedVialIndex","undefined","newState","updateGameState","sourceIndex","targetIndex","sourceVial","targetVial","console","log","sourceColor","targetColor","pop","newGameState","pourLiquid","disabled","xmlns","viewBox","fillRule","d","clipRule","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c55871f8.chunk.js","sourcesContent":["import { maxVialSize } from './consts';\nimport { GameState } from './types';\n\nfunction shuffle(array: any[]) {\n  let resultArray = [...array];\n  let currentIndex = resultArray.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = resultArray[currentIndex];\n    resultArray[currentIndex] = resultArray[randomIndex];\n    resultArray[randomIndex] = temporaryValue;\n  }\n\n  return resultArray;\n}\n\nexport function getRandomGamedata(colors: string[], maxVialSize: number): string[][] {\n  const result: string[][] = [];\n  const duplicatedColors = colors.flatMap((color) => Array(maxVialSize).fill(color));\n  const shuffledColors = shuffle(duplicatedColors);\n  for (let i = 0; i < shuffledColors.length; i += maxVialSize) {\n    result.push(shuffledColors.slice(i, i + maxVialSize));\n  }\n  return result;\n}\n\nexport const pourLiquid = (gameState: string[][], sourceIndex: number, targetIndex: number): GameState => {\n  const sourceVial = [...gameState[sourceIndex]];\n  const targetVial = [...gameState[targetIndex]];\n  console.log(sourceVial, targetVial);\n  while (true) {\n    if (targetVial.length === maxVialSize || sourceVial.length === 0) {\n      break;\n    }\n    const sourceColor = sourceVial[sourceVial.length - 1];\n    const targetColor = targetVial[targetVial.length - 1];\n    if (sourceColor !== targetColor && targetColor !== undefined) {\n      break;\n    }\n    targetVial.push(sourceVial.pop() as string);\n  }\n  let newGameState = [...gameState];\n  newGameState[sourceIndex] = sourceVial;\n  newGameState[targetIndex] = targetVial;\n  return newGameState;\n};\n","import './Vial.css';\nimport { VialState } from './types';\n\ntype Props = {\n  vialState: VialState;\n  selected: boolean;\n  onClick: () => void;\n  size: number;\n};\n\nconst Vial = ({ vialState, selected, onClick, size }: Props) => {\n  const emptySlotsCount = size - vialState.length;\n  const emptySlots = emptySlotsCount > 0 ? Array(emptySlotsCount).fill(null) : [];\n  return (\n    <div className={`vial ${selected ? 'vial--selected' : ''}`} onClick={onClick}>\n      {emptySlots.map((_, index: number) => (\n        <div className=\"vial-liquid\" key={`${index}-empty`} />\n      ))}\n      {vialState\n        .slice()\n        .reverse()\n        .map((item: string, index: number) => (\n          <div className=\"vial-liquid\" style={{ backgroundColor: item }} key={`${index}-${item}`} />\n        ))}\n    </div>\n  );\n};\n\nexport default Vial;\n","import Vial from './Vial';\nimport { GameState } from './types';\nimport { maxVialSize } from './consts';\nimport './VialDisplay.css';\n\ntype Props = {\n  gameState: GameState;\n  selectedVial?: number;\n  onVialClick: (vialIndex: number) => void;\n};\n\nconst VialDisplay = ({ gameState, selectedVial, onVialClick }: Props) => {\n  const indexedState = gameState.map((vial, index) => ({\n    index,\n    vial,\n  }));\n  let rows;\n  if (indexedState.length <= 5) {\n    rows = [indexedState];\n  } else {\n    rows = [\n      indexedState.slice(0, Math.ceil(indexedState.length / 2)),\n      indexedState.slice(Math.ceil(indexedState.length / 2), indexedState.length),\n    ];\n  }\n\n  return (\n    <div className=\"vial-display\">\n      {rows.map((row, rowIndex) => (\n        <div className=\"vial-display--row\" key={rowIndex}>\n          {row.map(({ vial, index }) => (\n            <Vial\n              key={index}\n              vialState={vial}\n              onClick={() => onVialClick(index)}\n              selected={selectedVial === index}\n              size={maxVialSize}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default VialDisplay;\n","export const colors = [\n  '#ff4d4d',\n  '#3db33d',\n  '#5656ff',\n  '#eee167',\n  '#fd59e7',\n  '#eea667',\n  '#84b2ff',\n  '#6e0000',\n  '#4a0973',\n  '#235b00',\n  '#944900',\n  '#7e9400',\n];\n\nexport const maxVialSize = 4;\n","import { useState } from 'react';\nimport './App.css';\nimport { getRandomGamedata, pourLiquid } from './utils';\nimport VialDisplay from './VialDisplay';\nimport { colors, maxVialSize } from './consts';\nimport { GameState } from './types';\n\nconst vialData: GameState = getRandomGamedata(colors, maxVialSize).concat([[], []]);\n\nfunction App() {\n  const [selectedVial, setSelectedVial] = useState<number>();\n  const [gameState, setGameState] = useState<GameState>(vialData);\n  const [history, setHistory] = useState<GameState[]>([]);\n\n  const updateGameState = (newState: GameState) => {\n    setHistory([...history, gameState]);\n    setGameState(newState);\n  };\n\n  const undoMove = () => {\n    if (history.length === 0) return;\n    setSelectedVial(undefined);\n    setGameState(history[history.length - 1]);\n    setHistory(history.slice(0, history.length - 1));\n    console.log({\n      gameState,\n      history,\n    });\n  };\n\n  const selectVial = (selectedVialIndex: number): void => {\n    if (selectedVial === undefined) {\n      setSelectedVial(selectedVialIndex);\n      return;\n    } else if (selectedVialIndex === selectedVial) {\n      setSelectedVial(undefined);\n      return;\n    } else {\n      const newState = pourLiquid(gameState, selectedVial, selectedVialIndex);\n      updateGameState(newState);\n      setSelectedVial(undefined);\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <VialDisplay gameState={gameState} onVialClick={selectVial} selectedVial={selectedVial} />\n      <button className=\"undo-button\" disabled={history.length === 0} onClick={undoMove}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path\n            fillRule=\"evenodd\"\n            d=\"M7.707 3.293a1 1 0 010 1.414L5.414 7H11a7 7 0 017 7v2a1 1 0 11-2 0v-2a5 5 0 00-5-5H5.414l2.293 2.293a1 1 0 11-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n        Undo\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}