{"version":3,"sources":["Vial.tsx","App.tsx","utils.ts","index.tsx"],"names":["Vial","vialState","selected","onClick","emptySlotsCount","size","length","emptySlots","Array","fill","className","map","_","index","slice","reverse","item","style","backgroundColor","vialData","colors","maxVialSize","result","shuffledColors","array","temporaryValue","randomIndex","resultArray","currentIndex","Math","floor","random","shuffle","flatMap","color","i","push","getRandomGamedata","concat","App","rows","useState","selectedVial","setSelectedVial","gameState","setGameState","selectVial","selectedVialIndex","undefined","newState","sourceIndex","targetIndex","sourceVial","targetVial","console","log","sourceColor","targetColor","pop","newGameState","pourLiquid","indexedState","vial","ceil","row","rowIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e30b1224.chunk.js","sourcesContent":["import './Vial.css';\nimport { VialState } from './App';\n\ntype Props = {\n  vialState: VialState;\n  selected: boolean;\n  onClick: () => void;\n  size: number;\n};\n\nconst Vial = ({ vialState, selected, onClick, size }: Props) => {\n  const emptySlotsCount = size - vialState.length;\n  const emptySlots = emptySlotsCount > 0 ? Array(emptySlotsCount).fill(null) : [];\n  return (\n    <div className={`vial ${selected ? 'vial--selected' : ''}`} onClick={onClick}>\n      {emptySlots.map((_, index: number) => (\n        <div className=\"vial-liquid\" key={`${index}-empty`} />\n      ))}\n      {vialState\n        .slice()\n        .reverse()\n        .map((item: string, index: number) => (\n          <div className=\"vial-liquid\" style={{ backgroundColor: item }} key={`${index}-${item}`} />\n        ))}\n    </div>\n  );\n};\n\nexport default Vial;\n","import { useState } from 'react';\nimport './App.css';\nimport Vial from './Vial';\nimport { getRandomGamedata } from './utils';\n\nexport type VialState = string[];\ntype GameState = VialState[];\n\nconst colors = [\n  '#ff4d4d',\n  '#3db33d',\n  '#5656ff',\n  '#eee167',\n  '#fd59e7',\n  '#eea667',\n  '#84b2ff',\n  '#6e0000',\n  '#4a0973',\n  '#235b00',\n  '#944900',\n  '#7e9400',\n];\nconst maxVialSize = 4;\nconst vialData: GameState = getRandomGamedata(colors, maxVialSize).concat([[], []]);\n\nconst pourLiquid = (gameState: string[][], sourceIndex: number, targetIndex: number): GameState => {\n  const sourceVial = [...gameState[sourceIndex]];\n  const targetVial = [...gameState[targetIndex]];\n  console.log(sourceVial, targetVial);\n  while (true) {\n    if (targetVial.length === maxVialSize || sourceVial.length === 0) {\n      break;\n    }\n    const sourceColor = sourceVial[sourceVial.length - 1];\n    const targetColor = targetVial[targetVial.length - 1];\n    if (sourceColor !== targetColor && targetColor !== undefined) {\n      break;\n    }\n    targetVial.push(sourceVial.pop() as string);\n  }\n  let newGameState = [...gameState];\n  newGameState[sourceIndex] = sourceVial;\n  newGameState[targetIndex] = targetVial;\n  return newGameState;\n};\n\nfunction App() {\n  const [selectedVial, setSelectedVial] = useState<number>();\n  const [gameState, setGameState] = useState(vialData);\n\n  const selectVial = (selectedVialIndex: number): void => {\n    if (selectedVial === undefined) {\n      setSelectedVial(selectedVialIndex);\n      return;\n    } else if (selectedVialIndex === selectedVial) {\n      setSelectedVial(undefined);\n      return;\n    } else {\n      const newState = pourLiquid(gameState, selectedVial, selectedVialIndex);\n      setGameState(newState);\n      setSelectedVial(undefined);\n    }\n  };\n\n  let indexedState = gameState.map((vial, index) => ({\n    index,\n    vial,\n  }));\n  let rows;\n  if (indexedState.length <= 5) {\n    rows = [indexedState];\n  } else {\n    rows = [\n      indexedState.slice(0, Math.ceil(indexedState.length / 2)),\n      indexedState.slice(Math.ceil(indexedState.length / 2), indexedState.length),\n    ];\n  }\n\n  return (\n    <div className=\"game-container\">\n      {rows.map((row, rowIndex) => (\n        <div className=\"game-container--row\" key={rowIndex}>\n          {row.map((vialData) => (\n            <Vial\n              key={vialData.index}\n              vialState={vialData.vial}\n              onClick={() => selectVial(vialData.index)}\n              selected={selectedVial === vialData.index}\n              size={maxVialSize}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","function shuffle(array: any[]) {\n  let resultArray = [...array];\n  let currentIndex = resultArray.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = resultArray[currentIndex];\n    resultArray[currentIndex] = resultArray[randomIndex];\n    resultArray[randomIndex] = temporaryValue;\n  }\n\n  return resultArray;\n}\n\nexport function getRandomGamedata(colors: string[], maxVialSize: number): string[][] {\n  const result: string[][] = [];\n  const duplicatedColors = colors.flatMap((color) => Array(maxVialSize).fill(color));\n  const shuffledColors = shuffle(duplicatedColors);\n  for (let i = 0; i < shuffledColors.length; i += maxVialSize) {\n    result.push(shuffledColors.slice(i, i + maxVialSize));\n  }\n  return result;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}