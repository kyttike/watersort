{"version":3,"sources":["consts.ts","utils.ts","Vial.tsx","VialDisplay.tsx","VictoryConfetti.tsx","App.tsx","index.tsx"],"names":["colors","shuffle","array","temporaryValue","randomIndex","resultArray","currentIndex","length","Math","floor","random","getRandomGamedata","maxVialSize","extraVials","result","duplicatedColors","flatMap","color","Array","fill","shuffledColors","i","push","slice","concat","Vial","vialState","selected","onClick","emptySlotsCount","size","emptySlots","className","map","_","index","reverse","item","style","backgroundColor","VialDisplay","rows","gameState","selectedVial","onVialClick","indexedState","vial","ceil","row","rowIndex","VictoryConfetti","useWindowSize","width","height","App","useState","setSelectedVial","setGameState","isGameOver","setGameOver","history","setHistory","updateGameState","newState","vialBaseColor","checkIsGameOver","selectedVialIndex","undefined","sourceIndex","targetIndex","sourceVial","targetVial","sourceColor","targetColor","pop","newGameState","pourLiquid","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6e130a4.chunk.js","sourcesContent":["export const colors = [\n  '#ff4d4d',\n  '#3db33d',\n  '#5656ff',\n  '#eee167',\n  '#fd59e7',\n  '#eea667',\n  '#84b2ff',\n  '#6e0000',\n  '#4a0973',\n  '#235b00',\n  '#944900',\n  '#7e9400',\n];\n\nexport const maxVialSize = 4;\n","import { maxVialSize } from './consts';\nimport { GameState } from './types';\n\nfunction shuffle(array: any[]) {\n  let resultArray = [...array];\n  let currentIndex = resultArray.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = resultArray[currentIndex];\n    resultArray[currentIndex] = resultArray[randomIndex];\n    resultArray[randomIndex] = temporaryValue;\n  }\n\n  return resultArray;\n}\n\nexport function getRandomGamedata(colors: string[], maxVialSize: number = 4, extraVials: number = 2): string[][] {\n  const result: string[][] = [];\n  const duplicatedColors = colors.flatMap((color) => Array(maxVialSize).fill(color));\n  const shuffledColors = shuffle(duplicatedColors);\n  for (let i = 0; i < shuffledColors.length; i += maxVialSize) {\n    result.push(shuffledColors.slice(i, i + maxVialSize));\n  }\n  return result.concat(Array(extraVials).fill([]));\n}\n\nexport const pourLiquid = (gameState: GameState, sourceIndex: number, targetIndex: number): GameState => {\n  const sourceVial = [...gameState[sourceIndex]];\n  const targetVial = [...gameState[targetIndex]];\n  while (true) {\n    if (targetVial.length === maxVialSize || sourceVial.length === 0) {\n      break;\n    }\n    const sourceColor = sourceVial[sourceVial.length - 1];\n    const targetColor = targetVial[targetVial.length - 1];\n    if (sourceColor !== targetColor && targetColor !== undefined) {\n      break;\n    }\n    targetVial.push(sourceVial.pop() as string);\n  }\n  let newGameState = [...gameState];\n  newGameState[sourceIndex] = sourceVial;\n  newGameState[targetIndex] = targetVial;\n  return newGameState;\n};\n\nexport const checkIsGameOver = (gameState: GameState): boolean => {\n  for (const vial of gameState) {\n    if (vial.length > 0 && vial.length < 4) return false;\n    let vialBaseColor = vial[0];\n    for (const color of vial) {\n      if (vial.length === 0) {\n        continue;\n      }\n      if (color !== vialBaseColor) return false;\n    }\n  }\n  return true;\n};\n","import './Vial.css';\nimport { VialState } from './types';\n\ntype Props = {\n  vialState: VialState;\n  selected: boolean;\n  onClick: () => void;\n  size: number;\n};\n\nconst Vial = ({ vialState, selected, onClick, size }: Props) => {\n  const emptySlotsCount = size - vialState.length;\n  const emptySlots = emptySlotsCount > 0 ? Array(emptySlotsCount).fill(null) : [];\n  return (\n    <div className={`vial ${selected ? 'vial--selected' : ''}`} onClick={onClick}>\n      {emptySlots.map((_, index: number) => (\n        <div className=\"vial-liquid\" key={`${index}-empty`} />\n      ))}\n      {vialState\n        .slice()\n        .reverse()\n        .map((item: string, index: number) => (\n          <div className=\"vial-liquid\" style={{ backgroundColor: item }} key={`${index}-${item}`} />\n        ))}\n    </div>\n  );\n};\n\nexport default Vial;\n","import Vial from './Vial';\nimport { GameState } from './types';\nimport { maxVialSize } from './consts';\nimport './VialDisplay.css';\n\ntype Props = {\n  gameState: GameState;\n  selectedVial?: number;\n  onVialClick: (vialIndex: number) => void;\n};\n\nconst VialDisplay = ({ gameState, selectedVial, onVialClick }: Props) => {\n  const indexedState = gameState.map((vial, index) => ({\n    index,\n    vial,\n  }));\n  let rows;\n  if (indexedState.length <= 5) {\n    rows = [indexedState];\n  } else {\n    rows = [\n      indexedState.slice(0, Math.ceil(indexedState.length / 2)),\n      indexedState.slice(Math.ceil(indexedState.length / 2), indexedState.length),\n    ];\n  }\n\n  return (\n    <div className=\"vial-display\">\n      {rows.map((row, rowIndex) => (\n        <div className=\"vial-display--row\" key={rowIndex}>\n          {row.map(({ vial, index }) => (\n            <Vial\n              key={index}\n              vialState={vial}\n              onClick={() => onVialClick(index)}\n              selected={selectedVial === index}\n              size={maxVialSize}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default VialDisplay;\n","import ReactConfetti from 'react-confetti';\nimport { useWindowSize } from 'react-use';\n\nconst VictoryConfetti = () => {\n  const { width, height } = useWindowSize();\n  return <ReactConfetti width={width} height={height} />;\n};\n\nexport default VictoryConfetti;\n","import { useState } from 'react';\nimport './App.css';\nimport { checkIsGameOver, getRandomGamedata, pourLiquid } from './utils';\nimport VialDisplay from './VialDisplay';\nimport { colors, maxVialSize } from './consts';\nimport { GameState } from './types';\nimport VictoryConfetti from './VictoryConfetti';\n\nfunction App() {\n  const [selectedVial, setSelectedVial] = useState<number>();\n  const [gameState, setGameState] = useState<GameState>(getRandomGamedata(colors, maxVialSize));\n  const [isGameOver, setGameOver] = useState<boolean>(false);\n  const [history, setHistory] = useState<GameState[]>([]);\n\n  const resetGame = () => {\n    setHistory([]);\n    setGameState(getRandomGamedata(colors, maxVialSize));\n    setGameOver(false);\n    setSelectedVial(undefined);\n  };\n\n  const updateGameState = (newState: GameState) => {\n    setHistory([...history, gameState]);\n    setGameState(newState);\n    setGameOver(checkIsGameOver(newState));\n  };\n\n  const undoMove = () => {\n    if (history.length === 0) return;\n    setSelectedVial(undefined);\n    setGameState(history[history.length - 1]);\n    setGameOver(false);\n    setHistory(history.slice(0, history.length - 1));\n  };\n\n  const selectVial = (selectedVialIndex: number): void => {\n    if (selectedVial === undefined) {\n      setSelectedVial(selectedVialIndex);\n      return;\n    } else if (selectedVialIndex === selectedVial) {\n      setSelectedVial(undefined);\n      return;\n    } else {\n      const newState = pourLiquid(gameState, selectedVial, selectedVialIndex);\n      updateGameState(newState);\n      setSelectedVial(undefined);\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <VialDisplay gameState={gameState} onVialClick={selectVial} selectedVial={selectedVial} />\n      <div className=\"game-container--buttons\">\n        <button className=\"button\" onClick={resetGame}>\n          {isGameOver ? 'New game' : 'Restart'}\n        </button>\n        {isGameOver ? null : (\n          <button className=\"button\" disabled={history.length === 0} onClick={undoMove}>\n            Undo\n          </button>\n        )}\n      </div>\n      {isGameOver ? <VictoryConfetti /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}